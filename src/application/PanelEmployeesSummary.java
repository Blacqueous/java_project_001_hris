/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package application;

import classes.ClassConstantsCustom;
import classes.ClassDateFormatValue;
import classes.ClassLabelButton;
import classes.ClassTableCustomCellRenderer;
import classes.ClassMyDBConnectionEmbeddedDerby;
import classes.ClassSearchBy;
import classes.ClassTableButtonEditor;
import classes.ClassTableButtonRenderer;
import classes.ClassTableHeaderListenerCheckbox;
import classes.ClassTableHeaderRendererAlignCenter;
import classes.ClassTableHeaderRendererAlignLeft;
import classes.ClassTableHeaderRendererAlignRight;
import classes.ClassTableHeaderRendererCheckbox;
import classes.ClassTextfieldPrompt;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.image.BufferedImage;
import java.net.URL;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author egrubellano
 */
public class PanelEmployeesSummary extends javax.swing.JPanel {

    Color rowBGColorOdd = new Color(245, 245, 245);
    Color rowBGColorEvn = new Color(250, 250, 250);
    Color rowBGColorSel = new Color(115, 164, 209);
    Color btnFGColorNew = new Color(255, 255, 255);
    Color btnFGColorOld = new Color(40, 40, 40);
    Color btnBGColorNew = new Color(115, 164, 209);
    Color btnBGColorOld = new Color(235, 235, 235);
    Color btnBGColorPrs = new Color(105, 154, 199);
    private BufferedImage img;
    private TableRowSorter sorter;
    private DefaultTableModel model;
    private DefaultComboBoxModel dcbm;
    private final ClassSearchBy searchBy = new ClassSearchBy();
    private final ClassConstantsCustom constant = new ClassConstantsCustom();
    private final ClassDateFormatValue format_date = new ClassDateFormatValue();
    private final ClassLabelButton lbl_btn = new ClassLabelButton();
    private final ClassTableCustomCellRenderer chkboxCellRenderer = new ClassTableCustomCellRenderer();
    private final ImageIcon imgBtnUpdate = new javax.swing.ImageIcon(getClass().getResource("/images/icons/icon_23_eye.png"));
    private final TableCellRenderer th_align_left = new ClassTableHeaderRendererAlignLeft();
    private final TableCellRenderer th_align_right = new ClassTableHeaderRendererAlignRight();
    private final TableCellRenderer th_align_center = new ClassTableHeaderRendererAlignCenter();
    protected String where = "";
    protected PanelEmployees panel_parent;

    /**
     * Creates new form PanelDashboard
     */
    public PanelEmployeesSummary() {
        initComponents();
        initAdditionalComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        popup_menu = new javax.swing.JPopupMenu();
        popup_menu_refresh = new javax.swing.JMenuItem();
        popup_separator = new javax.swing.JPopupMenu.Separator();
        popup_menu_firstname = new javax.swing.JMenuItem();
        popup_menu_middlename = new javax.swing.JMenuItem();
        popup_menu_lastname = new javax.swing.JMenuItem();
        popup_menu_plantilla = new javax.swing.JMenuItem();
        popup_menu_position = new javax.swing.JMenuItem();
        popup_menu_office = new javax.swing.JMenuItem();
        popup_menu_category = new javax.swing.JMenuItem();
        label_search = new javax.swing.JLabel();
        panel_control = new javax.swing.JPanel();
        panel_control_button = new javax.swing.JPanel();
        panel_control_button_list = new javax.swing.JPanel();
        panel_control_button_create = new javax.swing.JPanel();
        label_button_create = new javax.swing.JLabel();
        panel_control_button_delete = new javax.swing.JPanel();
        label_button_delete = new javax.swing.JLabel();
        panel_control_searchbar = new javax.swing.JPanel();
        panel_control_search = new javax.swing.JPanel();
        splitbutton_search = new org.gpl.JSplitButton.JSplitButton();
        txtfld_search = new javax.swing.JTextField();
        panel_center = new javax.swing.JPanel();
        panel_table = new javax.swing.JPanel();
        scrollpane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        panel_table_result = new javax.swing.JPanel();
        label_table_result_logo = new javax.swing.JLabel();
        label_table_result_total = new javax.swing.JLabel();

        popup_menu.setBackground(new java.awt.Color(255, 255, 255));
        popup_menu.setNextFocusableComponent(txtfld_search);
        popup_menu.setOpaque(false);

        popup_menu_refresh.setBackground(new java.awt.Color(255, 255, 255));
        popup_menu_refresh.setFont(new java.awt.Font("Century Gothic", 3, 11)); // NOI18N
        popup_menu_refresh.setForeground(new java.awt.Color(35, 35, 35));
        popup_menu_refresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons/icon_16_arrow_refresh.png"))); // NOI18N
        popup_menu_refresh.setText("Refresh");
        popup_menu_refresh.setIconTextGap(10);
        popup_menu_refresh.setNextFocusableComponent(txtfld_search);
        popup_menu_refresh.setPreferredSize(new java.awt.Dimension(150, 25));
        popup_menu_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_refreshActionPerformed(evt);
            }
        });
        popup_menu.add(popup_menu_refresh);

        popup_separator.setPreferredSize(new java.awt.Dimension(150, 10));
        popup_menu.add(popup_separator);

        popup_menu_firstname.setBackground(new java.awt.Color(255, 255, 255));
        popup_menu_firstname.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        popup_menu_firstname.setForeground(new java.awt.Color(35, 35, 35));
        popup_menu_firstname.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons/icon_16_textfield_left.png"))); // NOI18N
        popup_menu_firstname.setText("First Name");
        popup_menu_firstname.setIconTextGap(10);
        popup_menu_firstname.setNextFocusableComponent(txtfld_search);
        popup_menu_firstname.setPreferredSize(new java.awt.Dimension(150, 25));
        popup_menu_firstname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_firstnameActionPerformed(evt);
            }
        });
        popup_menu.add(popup_menu_firstname);

        popup_menu_middlename.setBackground(new java.awt.Color(255, 255, 255));
        popup_menu_middlename.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        popup_menu_middlename.setForeground(new java.awt.Color(35, 35, 35));
        popup_menu_middlename.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons/icon_16_textfield_center.png"))); // NOI18N
        popup_menu_middlename.setText("Middle Name");
        popup_menu_middlename.setIconTextGap(10);
        popup_menu_middlename.setNextFocusableComponent(txtfld_search);
        popup_menu_middlename.setPreferredSize(new java.awt.Dimension(150, 25));
        popup_menu_middlename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_middlenameActionPerformed(evt);
            }
        });
        popup_menu.add(popup_menu_middlename);

        popup_menu_lastname.setBackground(new java.awt.Color(255, 255, 255));
        popup_menu_lastname.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        popup_menu_lastname.setForeground(new java.awt.Color(35, 35, 35));
        popup_menu_lastname.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons/icon_16_textfield_right.png"))); // NOI18N
        popup_menu_lastname.setText("Last Name");
        popup_menu_lastname.setIconTextGap(10);
        popup_menu_lastname.setNextFocusableComponent(txtfld_search);
        popup_menu_lastname.setPreferredSize(new java.awt.Dimension(150, 25));
        popup_menu_lastname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_lastnameActionPerformed(evt);
            }
        });
        popup_menu.add(popup_menu_lastname);

        popup_menu_plantilla.setBackground(new java.awt.Color(255, 255, 255));
        popup_menu_plantilla.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        popup_menu_plantilla.setForeground(new java.awt.Color(35, 35, 35));
        popup_menu_plantilla.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons/icon_16_textfield_format.png"))); // NOI18N
        popup_menu_plantilla.setText("Plantilla Number");
        popup_menu_plantilla.setIconTextGap(10);
        popup_menu_plantilla.setNextFocusableComponent(txtfld_search);
        popup_menu_plantilla.setPreferredSize(new java.awt.Dimension(150, 25));
        popup_menu_plantilla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_plantillaActionPerformed(evt);
            }
        });
        popup_menu.add(popup_menu_plantilla);

        popup_menu_position.setBackground(new java.awt.Color(255, 255, 255));
        popup_menu_position.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        popup_menu_position.setForeground(new java.awt.Color(35, 35, 35));
        popup_menu_position.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons/icon_16_luggage.png"))); // NOI18N
        popup_menu_position.setText("Position");
        popup_menu_position.setIconTextGap(10);
        popup_menu_position.setNextFocusableComponent(txtfld_search);
        popup_menu_position.setPreferredSize(new java.awt.Dimension(150, 25));
        popup_menu_position.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_positionActionPerformed(evt);
            }
        });
        popup_menu.add(popup_menu_position);

        popup_menu_office.setBackground(new java.awt.Color(255, 255, 255));
        popup_menu_office.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        popup_menu_office.setForeground(new java.awt.Color(35, 35, 35));
        popup_menu_office.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons/icon_16_bank.png"))); // NOI18N
        popup_menu_office.setText("Department");
        popup_menu_office.setIconTextGap(10);
        popup_menu_office.setNextFocusableComponent(txtfld_search);
        popup_menu_office.setPreferredSize(new java.awt.Dimension(150, 25));
        popup_menu_office.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_officeActionPerformed(evt);
            }
        });
        popup_menu.add(popup_menu_office);

        popup_menu_category.setBackground(new java.awt.Color(255, 255, 255));
        popup_menu_category.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        popup_menu_category.setForeground(new java.awt.Color(35, 35, 35));
        popup_menu_category.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons/icon_16_category.png"))); // NOI18N
        popup_menu_category.setText("Category");
        popup_menu_category.setIconTextGap(10);
        popup_menu_category.setNextFocusableComponent(txtfld_search);
        popup_menu_category.setPreferredSize(new java.awt.Dimension(150, 25));
        popup_menu_category.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_categoryActionPerformed(evt);
            }
        });
        popup_menu.add(popup_menu_category);

        label_search.setFont(new java.awt.Font("Century Gothic", 3, 14)); // NOI18N
        label_search.setForeground(new java.awt.Color(50, 50, 50));
        label_search.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons/icon_16_magnifier.png"))); // NOI18N
        label_search.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        setOpaque(false);
        setLayout(new java.awt.BorderLayout());

        panel_control.setMaximumSize(new java.awt.Dimension(0, 55));
        panel_control.setMinimumSize(new java.awt.Dimension(0, 55));
        panel_control.setOpaque(false);
        panel_control.setPreferredSize(new java.awt.Dimension(0, 65));
        panel_control.setLayout(new java.awt.BorderLayout());

        panel_control_button.setMinimumSize(new java.awt.Dimension(400, 400));
        panel_control_button.setOpaque(false);
        panel_control_button.setPreferredSize(new java.awt.Dimension(400, 400));
        panel_control_button.setRequestFocusEnabled(false);
        panel_control_button.setLayout(new java.awt.CardLayout());

        panel_control_button_list.setBorder(javax.swing.BorderFactory.createEmptyBorder(8, 0, 5, 0));
        panel_control_button_list.setMinimumSize(new java.awt.Dimension(500, 560));
        panel_control_button_list.setOpaque(false);
        panel_control_button_list.setPreferredSize(new java.awt.Dimension(100, 560));
        panel_control_button_list.setLayout(new java.awt.GridLayout(1, 0));

        panel_control_button_create.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 12, 0, 0));
        panel_control_button_create.setMinimumSize(new java.awt.Dimension(220, 220));
        panel_control_button_create.setOpaque(false);
        panel_control_button_create.setPreferredSize(new java.awt.Dimension(220, 220));
        panel_control_button_create.setLayout(new java.awt.BorderLayout());

        label_button_create.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        label_button_create.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_button_create.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons/icon_20_users_00.png"))); // NOI18N
        label_button_create.setText("Add new employee");
        label_button_create.setIconTextGap(10);
        label_button_create.setOpaque(true);
        label_button_create.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                label_button_createMouseClicked(evt);
            }
        });
        panel_control_button_create.add(label_button_create, java.awt.BorderLayout.CENTER);

        panel_control_button_list.add(panel_control_button_create);

        panel_control_button_delete.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 12, 0, 0));
        panel_control_button_delete.setMinimumSize(new java.awt.Dimension(220, 220));
        panel_control_button_delete.setOpaque(false);
        panel_control_button_delete.setPreferredSize(new java.awt.Dimension(220, 220));
        panel_control_button_delete.setLayout(new java.awt.BorderLayout());

        label_button_delete.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        label_button_delete.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_button_delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons/icon_16_bin.png"))); // NOI18N
        label_button_delete.setText("Remove employee");
        label_button_delete.setIconTextGap(10);
        label_button_delete.setOpaque(true);
        panel_control_button_delete.add(label_button_delete, java.awt.BorderLayout.CENTER);

        panel_control_button_list.add(panel_control_button_delete);

        panel_control_button.add(panel_control_button_list, "card2");

        panel_control.add(panel_control_button, java.awt.BorderLayout.LINE_START);

        panel_control_searchbar.setBorder(javax.swing.BorderFactory.createEmptyBorder(15, 0, 13, 10));
        panel_control_searchbar.setMinimumSize(new java.awt.Dimension(230, 65));
        panel_control_searchbar.setOpaque(false);
        panel_control_searchbar.setPreferredSize(new java.awt.Dimension(230, 65));
        panel_control_searchbar.setLayout(new java.awt.BorderLayout());

        panel_control_search.setOpaque(false);
        panel_control_search.setLayout(new java.awt.GridBagLayout());

        splitbutton_search.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons/icon_16_magnifier.png"))); // NOI18N
        splitbutton_search.setAlwaysDropDown(true);
        splitbutton_search.setAutoscrolls(true);
        splitbutton_search.setComponentPopupMenu(popup_menu);
        splitbutton_search.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        splitbutton_search.setFocusable(false);
        splitbutton_search.setMinimumSize(new java.awt.Dimension(41, 41));
        splitbutton_search.setOpaque(false);
        splitbutton_search.setPopupMenu(popup_menu);
        splitbutton_search.setPreferredSize(new java.awt.Dimension(20, 41));
        splitbutton_search.setSeparatorSpacing(0);
        splitbutton_search.setSplitWidth(-8);
        splitbutton_search.setToolTipText("seaching by : Full Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panel_control_search.add(splitbutton_search, gridBagConstraints);

        txtfld_search.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        txtfld_search.setForeground(new java.awt.Color(75, 75, 75));
        txtfld_search.setMargin(new java.awt.Insets(2, 5, 2, 30));
        txtfld_search.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtfld_searchCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panel_control_search.add(txtfld_search, gridBagConstraints);

        panel_control_searchbar.add(panel_control_search, java.awt.BorderLayout.CENTER);

        panel_control.add(panel_control_searchbar, java.awt.BorderLayout.LINE_END);

        add(panel_control, java.awt.BorderLayout.PAGE_START);

        panel_center.setOpaque(false);
        panel_center.setLayout(new java.awt.BorderLayout());

        panel_table.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 10, 0, 10));
        panel_table.setOpaque(false);
        panel_table.setLayout(new java.awt.CardLayout());

        scrollpane.setBackground(new java.awt.Color(250, 250, 250));
        scrollpane.setOpaque(false);

        table.setFillsViewportHeight(true);
        table.setOpaque(false);
        table.setRequestFocusEnabled(false);
        table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        scrollpane.setViewportView(table);

        panel_table.add(scrollpane, "card_table_result");

        panel_center.add(panel_table, java.awt.BorderLayout.CENTER);

        panel_table_result.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 12, 10, 10));
        panel_table_result.setMinimumSize(new java.awt.Dimension(20, 35));
        panel_table_result.setOpaque(false);
        panel_table_result.setPreferredSize(new java.awt.Dimension(20, 35));
        panel_table_result.setLayout(new java.awt.BorderLayout());

        label_table_result_logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons/icon_16_user_silhouette_2.png"))); // NOI18N
        label_table_result_logo.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        label_table_result_logo.setEnabled(false);
        label_table_result_logo.setMaximumSize(new java.awt.Dimension(16, 0));
        label_table_result_logo.setMinimumSize(new java.awt.Dimension(16, 0));
        label_table_result_logo.setPreferredSize(new java.awt.Dimension(16, 0));
        panel_table_result.add(label_table_result_logo, java.awt.BorderLayout.LINE_START);

        label_table_result_total.setFont(new java.awt.Font("Century Gothic", 2, 12)); // NOI18N
        label_table_result_total.setForeground(new java.awt.Color(125, 125, 125));
        label_table_result_total.setText("0 result");
        label_table_result_total.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        label_table_result_total.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 8, 0, 0));
        label_table_result_total.setMaximumSize(new java.awt.Dimension(0, 35));
        label_table_result_total.setMinimumSize(new java.awt.Dimension(0, 35));
        label_table_result_total.setPreferredSize(new java.awt.Dimension(0, 35));
        label_table_result_total.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        panel_table_result.add(label_table_result_total, java.awt.BorderLayout.CENTER);

        panel_center.add(panel_table_result, java.awt.BorderLayout.PAGE_END);

        add(panel_center, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    public void initAdditionalComponents() {

        initTable();
        fillTable(searchBy.searchByString(where, txtfld_search.getText().toUpperCase()));

        setPlaceHolder();

        splitbutton_search.setBorderPainted(false);
        splitbutton_search.setFocusPainted(false);
        splitbutton_search.setContentAreaFilled(false);

        lbl_btn.addClass(label_button_create,   btnBGColorPrs, btnBGColorNew, btnBGColorOld, btnFGColorNew, btnFGColorOld);
        lbl_btn.addClass(label_button_delete,   btnBGColorPrs, btnBGColorNew, btnBGColorOld, btnFGColorNew, btnFGColorOld);
        lbl_btn.addClass(popup_menu_refresh,    btnBGColorPrs, btnBGColorNew, btnBGColorOld, btnFGColorNew, btnFGColorOld);
        lbl_btn.addClass(popup_menu_firstname,  btnBGColorPrs, btnBGColorNew, btnBGColorOld, btnFGColorNew, btnFGColorOld);
        lbl_btn.addClass(popup_menu_middlename, btnBGColorPrs, btnBGColorNew, btnBGColorOld, btnFGColorNew, btnFGColorOld);
        lbl_btn.addClass(popup_menu_lastname,   btnBGColorPrs, btnBGColorNew, btnBGColorOld, btnFGColorNew, btnFGColorOld);
        lbl_btn.addClass(popup_menu_plantilla,  btnBGColorPrs, btnBGColorNew, btnBGColorOld, btnFGColorNew, btnFGColorOld);
        lbl_btn.addClass(popup_menu_position,   btnBGColorPrs, btnBGColorNew, btnBGColorOld, btnFGColorNew, btnFGColorOld);
        lbl_btn.addClass(popup_menu_office,     btnBGColorPrs, btnBGColorNew, btnBGColorOld, btnFGColorNew, btnFGColorOld);
        lbl_btn.addClass(popup_menu_category,   btnBGColorPrs, btnBGColorNew, btnBGColorOld, btnFGColorNew, btnFGColorOld);
    }

    private void txtfld_searchCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtfld_searchCaretUpdate

        fillTable(searchBy.searchByString(where, txtfld_search.getText().toUpperCase()));
    }//GEN-LAST:event_txtfld_searchCaretUpdate

    private void popup_menu_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popup_menu_refreshActionPerformed

        where = constant.TABLE_SEARCH_NAME_FULL;
        splitbutton_search.setToolTipText("seaching by : Full Name");
        txtfld_search.requestFocus();
        txtfld_search.setText("");
    }//GEN-LAST:event_popup_menu_refreshActionPerformed

    private void popup_menu_firstnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popup_menu_firstnameActionPerformed

        where = constant.TABLE_SEARCH_NAME_FIRST;
        splitbutton_search.setToolTipText("seaching by : First Name");
        txtfld_search.requestFocus();
        txtfld_search.setText("");
    }//GEN-LAST:event_popup_menu_firstnameActionPerformed

    private void popup_menu_lastnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popup_menu_lastnameActionPerformed

        where = constant.TABLE_SEARCH_NAME_LAST;
        splitbutton_search.setToolTipText("seaching by : Last Name");
        txtfld_search.requestFocus();
        txtfld_search.setText("");
    }//GEN-LAST:event_popup_menu_lastnameActionPerformed

    private void popup_menu_middlenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popup_menu_middlenameActionPerformed

        where = constant.TABLE_SEARCH_NAME_MIDDLE;
        splitbutton_search.setToolTipText("seaching by : Middle Name");
        txtfld_search.requestFocus();
        txtfld_search.setText("");
    }//GEN-LAST:event_popup_menu_middlenameActionPerformed

    private void popup_menu_plantillaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popup_menu_plantillaActionPerformed

        where = constant.TABLE_SEARCH_PLANTILLA_NO;
        splitbutton_search.setToolTipText("seaching by : Plantilla No.");
        txtfld_search.requestFocus();
        txtfld_search.setText("");
    }//GEN-LAST:event_popup_menu_plantillaActionPerformed

    private void popup_menu_positionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popup_menu_positionActionPerformed

        where = constant.TABLE_SEARCH_POSITION;
        splitbutton_search.setToolTipText("seaching by : Position");
        txtfld_search.requestFocus();
        txtfld_search.setText("");
    }//GEN-LAST:event_popup_menu_positionActionPerformed

    private void popup_menu_officeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popup_menu_officeActionPerformed
 
        where = constant.TABLE_SEARCH_OFFICE;
        splitbutton_search.setToolTipText("seaching by : Department");
        txtfld_search.requestFocus();
        txtfld_search.setText("");
    }//GEN-LAST:event_popup_menu_officeActionPerformed

    private void popup_menu_categoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popup_menu_categoryActionPerformed

        where = constant.TABLE_SEARCH_CATEGORY;
        splitbutton_search.setToolTipText("seaching by : Category");
        txtfld_search.requestFocus();
        txtfld_search.setText("");
    }//GEN-LAST:event_popup_menu_categoryActionPerformed

    private void label_button_createMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_label_button_createMouseClicked

        this.panel_parent.loadCreate();
    }//GEN-LAST:event_label_button_createMouseClicked

    public void resetLabelButtons() {

        label_button_create.setBackground(btnBGColorOld);
        label_button_create.setForeground(btnFGColorOld);
        label_button_delete.setBackground(btnBGColorOld);
        label_button_delete.setForeground(btnFGColorOld);
    }

    public void setParentFrame(PanelEmployees parent) {

        this.panel_parent = parent;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel label_button_create;
    private javax.swing.JLabel label_button_delete;
    private javax.swing.JLabel label_search;
    private javax.swing.JLabel label_table_result_logo;
    private javax.swing.JLabel label_table_result_total;
    private javax.swing.JPanel panel_center;
    private javax.swing.JPanel panel_control;
    private javax.swing.JPanel panel_control_button;
    private javax.swing.JPanel panel_control_button_create;
    private javax.swing.JPanel panel_control_button_delete;
    private javax.swing.JPanel panel_control_button_list;
    private javax.swing.JPanel panel_control_search;
    private javax.swing.JPanel panel_control_searchbar;
    private javax.swing.JPanel panel_table;
    private javax.swing.JPanel panel_table_result;
    private javax.swing.JPopupMenu popup_menu;
    private javax.swing.JMenuItem popup_menu_category;
    private javax.swing.JMenuItem popup_menu_firstname;
    private javax.swing.JMenuItem popup_menu_lastname;
    private javax.swing.JMenuItem popup_menu_middlename;
    private javax.swing.JMenuItem popup_menu_office;
    private javax.swing.JMenuItem popup_menu_plantilla;
    private javax.swing.JMenuItem popup_menu_position;
    private javax.swing.JMenuItem popup_menu_refresh;
    private javax.swing.JPopupMenu.Separator popup_separator;
    private javax.swing.JScrollPane scrollpane;
    private org.gpl.JSplitButton.JSplitButton splitbutton_search;
    private javax.swing.JTable table;
    private javax.swing.JTextField txtfld_search;
    // End of variables declaration//GEN-END:variables

    enum Status {

        SELECTED, DESELECTED, INDETERMINATE
    }

    private void initTable() {

        // Configure current default-table-model
        model = new DefaultTableModel() {
            @Override
            public Class getColumnClass(int column) {
                switch (column) {
                    case 1:
                        return Boolean.class;
                    default:
                        return String.class;
                }
            }

            @Override
            public boolean isCellEditable(int row, int column) {
                switch (column) {
                    case 1:
                    case 2:
                        return true;
                    default:
                        return false;
                }
            }
        };

        ArrayList<Object> columnTitle = new ArrayList<>();
        int rowCount = 0;

        // Initialize derby database
        ClassMyDBConnectionEmbeddedDerby.initDB();

        try {
            Connection conn = ClassMyDBConnectionEmbeddedDerby.getMyConnection();
            try (Statement st = conn.createStatement()) {
                ResultSet rs = st.executeQuery(
                        "SELECT "
                        + " h.id, "
                        + " COALESCE(h.name_first || ' ', '') || COALESCE(h.name_middle || ' ', '') || h.name_last AS \"Employee Name\", "
                        + " h.plantilla_id AS \"Plantilla No.\", "
                        + " p.name AS \"Position\", "
                        + " o.name AS \"Office\", "
                        + " c.name AS \"Category\", "
                        + " h.date_hired AS \"Date Hired\", "
                        + " d.gender AS \"Gender\", "
                        + " d.civil_status AS \"Civil Status\", "
                        + " d.date_birth AS \"Date of Birth\" "
                        + " FROM "
                        + constant.TABLE_EMPLOYEE_HEADER + " AS h "
                        + " LEFT JOIN " + constant.TABLE_EMPLOYEE_DETAIL + " AS d ON h.id=d.header_id "
                        + " LEFT JOIN " + constant.TABLE_LIST_OFFICE + " AS o ON h.list_off_id=o.id "
                        + " LEFT JOIN " + constant.TABLE_LIST_POSITION + " AS p ON h.list_pos_id=p.id "
                        + " LEFT JOIN " + constant.TABLE_LIST_CATEGORY + " AS c ON h.list_cat_id=c.id "
                        + " WHERE " + constant.COLUMN_FIRST_NAME_UC + " LIKE '!)@(#*$&%^-/+_=~' "
                );

                ResultSetMetaData rsm = rs.getMetaData();
                int columnCount = rsm.getColumnCount();

                for (int i = 1; i <= columnCount; i++) {
                    columnTitle.add(rsm.getColumnName(i));
                    if (i == 1) {
                        columnTitle.add(Status.INDETERMINATE);
                        columnTitle.add("");
                    }
                }

                // Set column headers
                model.setDataVector(null, columnTitle.toArray());

            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage() + "\nClosing system.", "Database Connection: Failed", JOptionPane.ERROR_MESSAGE);
            System.exit(0);
        }

        // Set model as table's default model
        table = new JTable() {

            @Override
            public Component prepareRenderer(TableCellRenderer renderer, int row, int col) {

                Component c = super.prepareRenderer(renderer, row, col);
                if (c instanceof JComponent) {
                    JComponent jc = (JComponent) c;
                    String name = getValueAt(row, 0).toString();
                    String html = getHtml("employee_" + name);
                    jc.setToolTipText(html);
                }

                return c;
            }
        };

        table.setRowHeight(35);
        table.setModel(model);
        table.setSelectionBackground(rowBGColorSel);
        table.setFont(new Font("Tahoma", Font.PLAIN, 11));
        scrollpane.setViewportView(table);

        // Create & set table sorter
        sorter = new TableRowSorter(model);
        sorter.setSortable(1, false);
        sorter.setSortable(2, false);
        table.setRowSorter(sorter);

        // Set table resize to OFF
        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        // Turn OFF user ability to re-order columns
        table.getTableHeader().setReorderingAllowed(false);

        // Initialize custom row color
        table.setDefaultRenderer(Boolean.class, chkboxCellRenderer.CheckboxCellRenderer(rowBGColorOdd, rowBGColorEvn, rowBGColorSel));
        table.setDefaultRenderer(String.class, chkboxCellRenderer.StringCellRenderer(rowBGColorOdd, rowBGColorEvn, rowBGColorSel));

        // Initialize checkbox on table header
        model.addTableModelListener(new ClassTableHeaderListenerCheckbox(table, 1));

        // Initialize checkbox on table columns
        TableCellRenderer r = new ClassTableHeaderRendererCheckbox(table.getTableHeader(), 1);
        table.getColumnModel().getColumn(1).setHeaderRenderer(r);
        table.getColumnModel().getColumn(2).setHeaderRenderer(th_align_left);
        table.getColumnModel().getColumn(3).setHeaderRenderer(th_align_center);
        table.getColumnModel().getColumn(4).setHeaderRenderer(th_align_center);
        table.getColumnModel().getColumn(5).setHeaderRenderer(th_align_center);
        table.getColumnModel().getColumn(6).setHeaderRenderer(th_align_center);
        table.getColumnModel().getColumn(7).setHeaderRenderer(th_align_center);
        table.getColumnModel().getColumn(8).setHeaderRenderer(th_align_center);
        table.getColumnModel().getColumn(9).setHeaderRenderer(th_align_center);
        table.getColumnModel().getColumn(10).setHeaderRenderer(th_align_center);
        table.getColumnModel().getColumn(11).setHeaderRenderer(th_align_center);

        // Set table's header font
        JTableHeader th = table.getTableHeader();
        th.setFont(new Font("Century Gothic", Font.BOLD, 13));

        // Employee's ID
        table.getColumnModel().getColumn(0).setMaxWidth(0);
        table.getColumnModel().getColumn(0).setMinWidth(0);
        table.getColumnModel().getColumn(0).setPreferredWidth(0);
        table.getColumnModel().getColumn(0).setResizable(false);

        // Checkbox
        table.getColumnModel().getColumn(1).setMaxWidth(30);
        table.getColumnModel().getColumn(1).setMinWidth(30);
        table.getColumnModel().getColumn(1).setPreferredWidth(30);
        table.getColumnModel().getColumn(1).setResizable(false);

        // Initialize table update button
        ClassTableButtonEditor tblEditor_BtnUpdate = new ClassTableButtonEditor(imgBtnUpdate, rowBGColorOdd, rowBGColorEvn, rowBGColorSel) {

            @Override
            public void pushAction() {
                int valueUpdate = JOptionPane.showOptionDialog(null, "Update this account?", "Are you sure?", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Update", "Cancel"}, null);
                if (valueUpdate == 0) {
                    System.out.println("Update id : " + table.getModel().getValueAt(table.getSelectedRow(), 0));
                }
            }
        };
        tblEditor_BtnUpdate.setTable(table); // Set-up table update button

        ClassTableButtonRenderer tblRenderer_BtnUpdate = new ClassTableButtonRenderer(imgBtnUpdate, rowBGColorOdd, rowBGColorEvn, rowBGColorSel);

        // Update button
        table.getColumnModel().getColumn(2).setCellEditor(tblEditor_BtnUpdate);
        table.getColumnModel().getColumn(2).setCellRenderer(tblRenderer_BtnUpdate);
        table.getColumnModel().getColumn(2).setMaxWidth(35);
        table.getColumnModel().getColumn(2).setMinWidth(35);
        table.getColumnModel().getColumn(2).setPreferredWidth(35);
        table.getColumnModel().getColumn(2).setResizable(false);

        // Employee's name
        table.getColumnModel().getColumn(3).setMinWidth(400);
        table.getColumnModel().getColumn(3).setPreferredWidth(400);

        // Employee's plantilla number
        table.getColumnModel().getColumn(4).setMinWidth(128);
        table.getColumnModel().getColumn(4).setPreferredWidth(128);

        // Employee's position
        table.getColumnModel().getColumn(5).setMinWidth(175);
        table.getColumnModel().getColumn(5).setPreferredWidth(175);

        // Employee's office
        table.getColumnModel().getColumn(6).setMinWidth(224);
        table.getColumnModel().getColumn(6).setPreferredWidth(224);

        // Employee's category
        table.getColumnModel().getColumn(7).setMinWidth(160);
        table.getColumnModel().getColumn(7).setPreferredWidth(160);

        // Employee's date hired
        table.getColumnModel().getColumn(8).setMinWidth(150);
        table.getColumnModel().getColumn(8).setPreferredWidth(150);

        // Employee's gender
        table.getColumnModel().getColumn(9).setMinWidth(75);
        table.getColumnModel().getColumn(9).setPreferredWidth(75);

        // Employee's civil status
        table.getColumnModel().getColumn(10).setMinWidth(100);
        table.getColumnModel().getColumn(10).setPreferredWidth(100);

        // Employee's date of birth
        table.getColumnModel().getColumn(11).setMinWidth(150);
        table.getColumnModel().getColumn(11).setPreferredWidth(150);

        // Repaint table
        table.repaint();

        // Set row count
        label_table_result_total.setText(rowCount + ((rowCount <= 1) ? " result" : " results"));
    }

    private void fillTable(String addWhere) {

        // Empty table data
        model.setRowCount(0);

        // Reset checkbox table header
        table.getTableHeader().getColumnModel().getColumn(1).setHeaderValue(Status.DESELECTED);
        table.getTableHeader().repaint();

        // Ready variables needed
        ArrayList<Object> addRow;
        int rowCount = 0;

        // Initialize derby database
        ClassMyDBConnectionEmbeddedDerby.initDB();

        try {
            Connection conn = ClassMyDBConnectionEmbeddedDerby.getMyConnection();
            try (Statement st = conn.createStatement()) {
                ResultSet rs = st.executeQuery(
                        "SELECT "
                        + " h.id, "
                        + " COALESCE(h.name_first || ' ', '') || COALESCE(h.name_middle || ' ', '') || h.name_last AS \"Employee Name\", "
                        + " h.plantilla_id AS \"Plantilla No.\", "
                        + " p.name AS \"Position\", "
                        + " o.name AS \"Office\", "
                        + " c.name AS \"Category\", "
                        + " h.date_hired AS \"Date Hired\", "
                        + " d.gender AS \"Gender\", "
                        + " d.civil_status AS \"Civil Status\", "
                        + " d.date_birth AS \"Date of Birth\" "
                        + " FROM "
                        + constant.TABLE_EMPLOYEE_HEADER + " AS h "
                        + " LEFT JOIN " + constant.TABLE_EMPLOYEE_DETAIL + " AS d ON h.id=d.header_id "
                        + " LEFT JOIN " + constant.TABLE_LIST_OFFICE + " AS o ON h.list_off_id=o.id "
                        + " LEFT JOIN " + constant.TABLE_LIST_POSITION + " AS p ON h.list_pos_id=p.id "
                        + " LEFT JOIN " + constant.TABLE_LIST_CATEGORY + " AS c ON h.list_cat_id=c.id "
                        + " WHERE " + addWhere
                );

                // Set column information
                while (rs.next()) {
                    addRow = new ArrayList<>();
                    for (int i = 1; i <= rs.getMetaData().getColumnCount(); i++) {
                        if (i == 7 || i == 10) {
                            addRow.add(format_date.formatDateToString(format_date.formatStringToDate(rs.getString(i)), "MMMM dd, YYYY"));
                        } else {
                            addRow.add(rs.getString(i));
                        }

                        if (i == 1) {
                            addRow.add(false);
                            addRow.add("");
                        }
                    }

                    // Add column data
                    model.addRow(addRow.toArray());

                    rowCount++;
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage() + "\nClosing system.", "Database Connection: Failed", JOptionPane.ERROR_MESSAGE);
            System.exit(0);
        }

        // Set model as table's default model
        table.setModel(model);

        // Repaint table
        table.repaint();

        // Set row count
        label_table_result_total.setText(rowCount + ((rowCount <= 1) ? " result" : " results"));
    }

    private String getHtml(String name) {

        URL url = getClass().getResource("/img_emp_src/" + name + ".png");
        if (url == null) {
            url = getClass().getResource("/images/emp/preview~1.png");
        }
        String html
                = "<html><body>"
                + "<img src='"
                + url
                + "' width=175 height=175 style='background-color:#FFF;' /></body></html>";
        return html;
    }

    private void setPlaceHolder() {
        
        ClassTextfieldPrompt tpTxtfldSearch = new ClassTextfieldPrompt("Enter search here", txtfld_search);
        
        ClassTextfieldPrompt[] placeholder = { tpTxtfldSearch };
        
        // Adjust display
        for (ClassTextfieldPrompt placeholder1 : placeholder) {
            placeholder1.changeAlpha(0.4f);
            placeholder1.changeStyle(Font.ITALIC);
        }
    }

}
